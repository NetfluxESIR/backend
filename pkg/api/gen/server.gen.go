// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package gen

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a presigned url
	// (GET /api/v1/presignedurl/{key})
	GetPresignedUrl(c *gin.Context, key string)
	// Get a processing
	// (GET /api/v1/processing/{videoId})
	GetProcessing(c *gin.Context, videoId string)
	// Update the status of a processing
	// (POST /api/v1/processing/{videoId}/status)
	UpdateProcessingStatus(c *gin.Context, videoId openapi_types.UUID)
	// Update the step of a processing
	// (POST /api/v1/processing/{videoId}/steps)
	UpdateProcessingStep(c *gin.Context, videoId openapi_types.UUID)
	// Login a user
	// (POST /api/v1/users/login)
	LoginUser(c *gin.Context)
	// Register a user, only for admin
	// (POST /api/v1/users/register)
	RegisterUser(c *gin.Context)
	// Get all videos
	// (GET /api/v1/videos)
	GetVideos(c *gin.Context, params GetVideosParams)
	// Create a video
	// (POST /api/v1/videos)
	CreateVideo(c *gin.Context)
	// Delete a video
	// (DELETE /api/v1/videos/{videoId})
	DeleteVideo(c *gin.Context, videoId openapi_types.UUID)
	// Get a video
	// (GET /api/v1/videos/{videoId})
	GetVideo(c *gin.Context, videoId openapi_types.UUID)
	// Update a video
	// (PUT /api/v1/videos/{videoId})
	UpdateVideo(c *gin.Context, videoId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPresignedUrl operation middleware
func (siw *ServerInterfaceWrapper) GetPresignedUrl(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameter("simple", false, "key", c.Param("key"), &key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPresignedUrl(c, key)
}

// GetProcessing operation middleware
func (siw *ServerInterfaceWrapper) GetProcessing(c *gin.Context) {

	var err error

	// ------------- Path parameter "videoId" -------------
	var videoId string

	err = runtime.BindStyledParameter("simple", false, "videoId", c.Param("videoId"), &videoId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter videoId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetProcessing(c, videoId)
}

// UpdateProcessingStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateProcessingStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "videoId" -------------
	var videoId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "videoId", c.Param("videoId"), &videoId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter videoId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateProcessingStatus(c, videoId)
}

// UpdateProcessingStep operation middleware
func (siw *ServerInterfaceWrapper) UpdateProcessingStep(c *gin.Context) {

	var err error

	// ------------- Path parameter "videoId" -------------
	var videoId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "videoId", c.Param("videoId"), &videoId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter videoId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateProcessingStep(c, videoId)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.LoginUser(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RegisterUser(c)
}

// GetVideos operation middleware
func (siw *ServerInterfaceWrapper) GetVideos(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVideosParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVideos(c, params)
}

// CreateVideo operation middleware
func (siw *ServerInterfaceWrapper) CreateVideo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateVideo(c)
}

// DeleteVideo operation middleware
func (siw *ServerInterfaceWrapper) DeleteVideo(c *gin.Context) {

	var err error

	// ------------- Path parameter "videoId" -------------
	var videoId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "videoId", c.Param("videoId"), &videoId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter videoId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteVideo(c, videoId)
}

// GetVideo operation middleware
func (siw *ServerInterfaceWrapper) GetVideo(c *gin.Context) {

	var err error

	// ------------- Path parameter "videoId" -------------
	var videoId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "videoId", c.Param("videoId"), &videoId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter videoId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetVideo(c, videoId)
}

// UpdateVideo operation middleware
func (siw *ServerInterfaceWrapper) UpdateVideo(c *gin.Context) {

	var err error

	// ------------- Path parameter "videoId" -------------
	var videoId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "videoId", c.Param("videoId"), &videoId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter videoId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateVideo(c, videoId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/presignedurl/:key", wrapper.GetPresignedUrl)

	router.GET(options.BaseURL+"/api/v1/processing/:videoId", wrapper.GetProcessing)

	router.POST(options.BaseURL+"/api/v1/processing/:videoId/status", wrapper.UpdateProcessingStatus)

	router.POST(options.BaseURL+"/api/v1/processing/:videoId/steps", wrapper.UpdateProcessingStep)

	router.POST(options.BaseURL+"/api/v1/users/login", wrapper.LoginUser)

	router.POST(options.BaseURL+"/api/v1/users/register", wrapper.RegisterUser)

	router.GET(options.BaseURL+"/api/v1/videos", wrapper.GetVideos)

	router.POST(options.BaseURL+"/api/v1/videos", wrapper.CreateVideo)

	router.DELETE(options.BaseURL+"/api/v1/videos/:videoId", wrapper.DeleteVideo)

	router.GET(options.BaseURL+"/api/v1/videos/:videoId", wrapper.GetVideo)

	router.PUT(options.BaseURL+"/api/v1/videos/:videoId", wrapper.UpdateVideo)

	return router
}
